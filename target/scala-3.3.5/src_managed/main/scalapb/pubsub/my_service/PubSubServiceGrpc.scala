// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package pubsub.my_service


object PubSubServiceGrpc {
  val METHOD_SUBSCRIBE: _root_.io.grpc.MethodDescriptor[pubsub.my_service.SubscribeRequest, pubsub.my_service.Message] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pubsub.PubSubService", "Subscribe"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pubsub.my_service.SubscribeRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pubsub.my_service.Message])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pubsub.my_service.MyServiceProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val METHOD_PUBLISH: _root_.io.grpc.MethodDescriptor[pubsub.my_service.PublishRequest, pubsub.my_service.PublishResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pubsub.PubSubService", "Publish"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pubsub.my_service.PublishRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pubsub.my_service.PublishResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pubsub.my_service.MyServiceProto.javaDescriptor.getServices().get(0).getMethods().get(1)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("pubsub.PubSubService")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(pubsub.my_service.MyServiceProto.javaDescriptor))
      .addMethod(METHOD_SUBSCRIBE)
      .addMethod(METHOD_PUBLISH)
      .build()
  
  trait PubSubService extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[PubSubService] = PubSubService
    def subscribe(request: pubsub.my_service.SubscribeRequest, responseObserver: _root_.io.grpc.stub.StreamObserver[pubsub.my_service.Message]): _root_.scala.Unit
    def publish(request: pubsub.my_service.PublishRequest): scala.concurrent.Future[pubsub.my_service.PublishResponse]
  }
  
  object PubSubService extends _root_.scalapb.grpc.ServiceCompanion[PubSubService] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[PubSubService] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = pubsub.my_service.MyServiceProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = pubsub.my_service.MyServiceProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: PubSubService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_SUBSCRIBE,
        _root_.io.grpc.stub.ServerCalls.asyncServerStreamingCall((request: pubsub.my_service.SubscribeRequest, observer: _root_.io.grpc.stub.StreamObserver[pubsub.my_service.Message]) => {
          serviceImpl.subscribe(request, observer)
        }))
      .addMethod(
        METHOD_PUBLISH,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: pubsub.my_service.PublishRequest, observer: _root_.io.grpc.stub.StreamObserver[pubsub.my_service.PublishResponse]) => {
          serviceImpl.publish(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .build()
  }
  
  trait PubSubServiceBlockingClient {
    def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[PubSubService] = PubSubService
    def subscribe(request: pubsub.my_service.SubscribeRequest): scala.collection.Iterator[pubsub.my_service.Message]
    def publish(request: pubsub.my_service.PublishRequest): pubsub.my_service.PublishResponse
  }
  
  class PubSubServiceBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[PubSubServiceBlockingStub](channel, options) with PubSubServiceBlockingClient {
    override def subscribe(request: pubsub.my_service.SubscribeRequest): scala.collection.Iterator[pubsub.my_service.Message] = {
      _root_.scalapb.grpc.ClientCalls.blockingServerStreamingCall(channel, METHOD_SUBSCRIBE, options, request)
    }
    
    override def publish(request: pubsub.my_service.PublishRequest): pubsub.my_service.PublishResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_PUBLISH, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): PubSubServiceBlockingStub = new PubSubServiceBlockingStub(channel, options)
  }
  
  class PubSubServiceStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[PubSubServiceStub](channel, options) with PubSubService {
    override def subscribe(request: pubsub.my_service.SubscribeRequest, responseObserver: _root_.io.grpc.stub.StreamObserver[pubsub.my_service.Message]): _root_.scala.Unit = {
      _root_.scalapb.grpc.ClientCalls.asyncServerStreamingCall(channel, METHOD_SUBSCRIBE, options, request, responseObserver)
    }
    
    override def publish(request: pubsub.my_service.PublishRequest): scala.concurrent.Future[pubsub.my_service.PublishResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_PUBLISH, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): PubSubServiceStub = new PubSubServiceStub(channel, options)
  }
  
  object PubSubServiceStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[PubSubServiceStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): PubSubServiceStub = new PubSubServiceStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[PubSubServiceStub] = this
  }
  
  def bindService(serviceImpl: PubSubService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = PubSubService.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): PubSubServiceBlockingStub = new PubSubServiceBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): PubSubServiceStub = new PubSubServiceStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = pubsub.my_service.MyServiceProto.javaDescriptor.getServices().get(0)
  
}